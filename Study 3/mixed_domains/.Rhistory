fixef(model3.2)["conditionlosses:difficulty_num4"] <- 9.084643
fixef(model3.2)["conditionlosses:difficulty_quartile4"] <- 9.084643
summary(model3.2)
powerSim(model3.2, test = fcompare(y~condition+difficulty_num))
# Second version instead of using blocks easy (that has 1st and 2nd quartile difficulty anagrams), medium and hard
# We use quartiles
model3.2 <- lmer(total_anagrams_solved ~ condition + difficulty_quartile + difficulty_quartile*condition + (1|ID),
data=aggregated3[aggregated3$condition != "no_incentive",])
fixef(model3.2)["conditionlosses:difficulty_quartile4"] <- 9.084643
# extend sample
model3.2 <- extend(model3.2, along="ID", n=200)
powerSim(model3.2, test = fcompare(y~condition+difficulty_num))
powerSim(model3.2, test = fcompare(y~condition+difficulty_quartile))
# Second version instead of using blocks easy (that has 1st and 2nd quartile difficulty anagrams), medium and hard
# We use quartiles
model3.2 <- lmer(total_anagrams_solved ~ condition + difficulty_quartile + difficulty_quartile*condition + (1|ID),
data=aggregated3[aggregated3$condition != "no_incentive",])
fixef(model3.2)["conditionlosses:difficulty_quartile4"] <- 9.084643
# extend sample
model3.2 <- extend(model3.2, along="ID", n=350)
powerSim(model3.2, test = fcompare(y~condition+difficulty_quartile))
View(aggregated2)
# Second version instead of using blocks easy (that has 1st and 2nd quartile difficulty anagrams), medium and hard
# We use quartiles
model3.2 <- lmer(total_anagrams_solved ~ condition + difficulty_quartile + difficulty_quartile*condition + (1|ID),
data=aggregated3[aggregated3$condition != "no_incentive",])
fixef(model3.2)["conditionlosses:difficulty_quartile4"] <- 9.084643
# extend sample
model3.2 <- extend(model3.2, along="ID", n=500)
powerSim(model3.2, test = fcompare(y~condition+difficulty_quartile))
# Model 4 - Total time used per block
model4.1 <- lmer(duration_block_mins ~ condition + difficulty_num + difficulty_num*condition + (1|ID),
data=aggregated2[aggregated2$condition != "no_incentive",])
summary(model4.1)
0.2*sd(as.numeric(unlist(aggregated2[aggregated2$condition != "no_incentive", "duration_block_mins"])))
fixef(model4.1)["conditionlosses"] <- 4.727713
summary(model4.1)
powerSim(model4.1, test = fcompare(y~condition))
summary(model4.1)
powerSim(model4.1, test = fcompare(. ~condition))
summary(model4.1)
powerSim(model4.1, fixed("conditionlosses", "z"))
# extend sample
model4.1 <- extend(model4.1, along="ID", n=350)
powerSim(model4.1, fixed("conditionlosses", "z"))
0.2*sd(as.numeric(unlist(aggregated2[aggregated2$condition != "no_incentive", "duration_block_mins"])))
summary(model4.1)
# Model 4 - Total time used per block
model4.1 <- lmer(duration_block_mins ~ condition + difficulty_num + difficulty_num*condition + (1|ID),
data=aggregated2[aggregated2$condition != "no_incentive",])
summary(model4.1)
0.2*sd(as.numeric(unlist(aggregated2[aggregated2$condition != "no_incentive", "duration_block_mins"])))
fixef(model4.1)["conditionlosses"] <- 4.727713
# extend sample
model4.1 <- extend(model4.1, along="ID", n=300)
powerSim(model4.1, fixed("conditionlosses", "z"))
# Model 4 - Total time used per block
model4.1 <- lmer(duration_block_mins ~ condition + difficulty_num + difficulty_num*condition + (1|ID),
data=aggregated2[aggregated2$condition != "no_incentive",])
summary(model4.1)
0.2*sd(as.numeric(unlist(aggregated2[aggregated2$condition != "no_incentive", "duration_block_mins"])))
fixef(model4.1)["conditionlosses"] <- 4.727713
# extend sample
model4.1 <- extend(model4.1, along="ID", n=350)
powerSim(model4.1, fixed("conditionlosses", "z"))
View(df)
setwd("D:/Carlos/Documentos/Google Drive/Universidad/doctorado/experiments/loss reflection/loss reflection3/analysis")
df_anagrams <- read.csv("anagrams_exp_df.csv")
df_exp <- read.csv("df_val_anagrams.csv")
View(df_exp)
View(df_anagrams)
View(df_anagrams)
View(df_exp)
df_anagrams <- read.csv("anagrams_exp_df.csv")
df <- merge(df_exp[df_exp$block == "main", ],
df_anagrams[, c("anagram", "n_solutions", "letters_sp", "max_dist_freq_solutions", "function.", "mean_rank_3variables")],
by="anagram")
mean(df$anagram_solved)
mean(df$max_dist_freq_solutions)
View(df)
model <- glm(anagram_solved ~ scale(letters_sp) + scale(n_solutions) + scale(max_dist_freq_solutions) + scale(anagrams_seen),family=binomial(link='logit'), data=df)
summary(model)
model2 <- glm(anagram_solved ~ scale(letters_sp) + scale(n_solutions) + scale(max_dist_freq_solutions) +
scale(anagrams_seen) + scale(function.) + scale(mean_rank_3variables),family=binomial(link='logit'), data=df)
summary(model2)
View(df_anagrams)
df_anagrams2 <- read.csv("anagrams_losses_exp_to_labjs.csv")
df_anagrams2 <- read.csv("anagrams_losses_exp_df.csv")
View(df_anagrams)
df_anagrams3 <- read.csv("anagrams_exp_df.csv")
View(df_anagrams3)
df_anagrams3 <- NULL
model4 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen) +
scale(function.) + scale(mean_rank_3variables) +
(1 | participant_id), data = df, family = binomial(link = "logit"))
library(lme4)
model4 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen) +
scale(function.) + scale(mean_rank_3variables) +
(1 | participant_id), data = df, family = binomial(link = "logit"))
summary(model4)
df_anagrams2 <- read.csv("anagrams_losses_exp_df.csv")
View(df_anagrams2)
df_exp <- read.csv("df_val_anagrams.csv")
df_anagrams <- read.csv("anagrams_exp_df.csv")
df_exp2 <- read.csv("df_exp_anagrams.csv")
df_anagrams2 <- read.csv("anagrams_losses_exp_df.csv")
df2 <- merge(df_exp2[df_exp2$block == "main", ],
df_anagrams2[, c("anagram", "n_solutions", "letters_sp", "max_dist_freq_solutions", "function.", "mean_rank_3variables")],
by="anagram")
View(df2)
mean(df2$anagram_solved)
mean(df2$max_dist_freq_solutions)
model4.2 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen) +
scale(function.) + scale(mean_rank_3variables) +
(1 | participant_id), data = df2, family = binomial(link = "logit"))
model4.2 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
scale(function.) + scale(mean_rank_3variables) +
(1 | participant_id), data = df2, family = binomial(link = "logit"))
summary(model4.2)
model5.2 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
scale(function.) +
(1 | participant_id), data = df2, family = binomial(link = "logit"))
summary(model5.2)
library(AICcmodavg)
aictab(cand.set = list(model4.2, model5.2), modnames = c("model4", "model5"))
BIC(model5.2)
BIC(model4.2)
summary(df2$function.)
model4.2 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
as.factor(function.) + scale(mean_rank_3variables) +
(1 | participant_id), data = df2, family = binomial(link = "logit"))
summary(model4.2)
BIC(model4.2)
model5.2 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
as.factor(function.) +
(1 | participant_id), data = df2, family = binomial(link = "logit"))
summary(model5.2)
BIC(model5.2)
df_exp <- read.csv("df_val_anagrams.csv")
df_anagrams <- read.csv("extended_losses_exp_df.csv")
df_exp2 <- read.csv("df_exp_anagrams.csv")
df_exp %>%
rename(
anagrams_seen = anagrams_seen_total
)
library(tidyverse)
df_exp <- read.csv("df_val_anagrams.csv")
df_exp %>%
rename(
anagrams_seen = anagrams_seen_total
)
df_exp %>%
rename(
anagrams_seen_total = anagrams_seen
)
df_exp <- df_exp %>%
rename(
anagrams_seen_total = anagrams_seen
)
rbind(df_exp[df_exp$block == "main", c("anagram", "participant_id", "anagram_solved", "anagrams_seen_total")],
df_exp2[df_exp2$block == "main", c("anagram", "participant_id", "anagram_solved", "anagrams_seen_total")])
df_total <- rbind(df_exp[df_exp$block == "main", c("anagram", "participant_id", "anagram_solved", "anagrams_seen_total")],
df_exp2[df_exp2$block == "main", c("anagram", "participant_id", "anagram_solved", "anagrams_seen_total")])
df_anagrams <- read.csv("extended_losses_exp_df.csv")
df <- merge(df_total,
df_anagrams[, c("anagram", "n_solutions", "letters_sp", "max_dist_freq_solutions", "function.", "mean_rank_3variables")],
by="anagram")
df <- merge(df_total,
df_anagrams[, c("anagram", "n_solutions", "letters_sp", "max_dist_freq_solutions", "function", "mean_rank_3variables")],
by="anagram")
df <- merge(df_total,
df_anagrams[, c("anagram", "n_solutions", "letters_sp", "max_dist_freq_solutions", "function", "syl_sp")],
by="anagram")
colnames(df_anagrams)
df <- merge(df_total,
df_anagrams[, c("anagram", "n_solutions", "letters_sp", "max_dist_freq_solutions", "function.", "syl_sp")],
by="anagram")
mean(df$anagram_solved)
mean(df$max_dist_freq_solutions)
model <- glm(anagram_solved ~ scale(letters_sp) + scale(n_solutions) + scale(max_dist_freq_solutions) + scale(anagrams_seen),family=binomial(link='logit'), data=df)
model <- glm(anagram_solved ~ scale(letters_sp) + scale(n_solutions) + scale(max_dist_freq_solutions) + scale(anagrams_seen_total),family=binomial(link='logit'), data=df)
summary(model)
BIC(model1)
BIC(model)
model2 <- glm(anagram_solved ~ scale(letters_sp) + scale(n_solutions) + scale(max_dist_freq_solutions) +
scale(anagrams_seen_total) + scale(function.) + scale(mean_rank_3variables),family=binomial(link='logit'), data=df)
model2 <- glm(anagram_solved ~ scale(letters_sp) + scale(n_solutions) + scale(max_dist_freq_solutions) +
scale(anagrams_seen_total) + scale(function.) + scale(anagrams_seen_total),family=binomial(link='logit'), data=df)
summary(model2)
BIC(model2)
library(lme4)
model3 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
(1 | participant_id), data = df, family = binomial(link = "logit"))
summary(model3)
BIC(model3)
model4 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
scale(function.) + scale(mean_rank_3variables) +
(1 | participant_id), data = df, family = binomial(link = "logit"))
model4 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
scale(function.) +
(1 | participant_id), data = df, family = binomial(link = "logit"))
summary(model4)
BIC(model4)
View(df_anagrams)
model4 <- glmer(anagram_solved ~ scale(letters_sp) + scale(n_solutions) +
scale(max_dist_freq_solutions) + scale(anagrams_seen_total) +
scale(function.) + scale(syl_sp) +
(1 | participant_id), data = df, family = binomial(link = "logit"))
summary(model4)
BIC(model4)
df_anagrams$letters_sp2 <- scale(df_anagrams$letters_sp)[,1]
df_anagrams$n_solutions2 <- scale(df_anagrams$n_solutions)[,1]
df_anagrams$max_dist_freq_solutions2 <- scale(df_anagrams$max_dist_freq_solutions)[,1]
df_anagrams$function.2 <- scale(df_anagrams$function.)[,1]
df_anagrams$syl_sp <- scale(df_anagrams$syl_sp)[,1]
estimates <- summary(model4)$coefficients[, "Estimate"]
df_anagrams$difficulty_aggregate <- df_anagrams$letters_sp2 * estimates[2] + df_anagrams$n_solutions2 * estimates[3] +
df_anagrams$max_dist_freq_solutions2 * estimates[4] + df_anagrams$function.2 * estimates[5] +
df_anagrams$syl_sp * estimates[5]
View(df_anagrams)
df_anagrams_sorted <- df_anagrams[rev(order(df_anagrams$difficulty_aggregate)),]
df_anagrams_sorted$quartile<-cut(df_anagrams_sorted$difficulty_aggregate,
quantile(df_anagrams_sorted$difficulty_aggregate),
include.lowest=TRUE, labels=FALSE)
nrow(df_anagrams_sorted[df_anagrams_sorted$quartile %in% c(3,4), ])
nrow(df_anagrams_sorted[df_anagrams_sorted$quartile %in% c(2), ])
nrow(df_anagrams_sorted[df_anagrams_sorted$quartile %in% c(1), ])
View(df_anagrams_sorted)
df_anagrams_sorted$block <- "main"
df_anagrams_sorted$difficulty <- "easy"
df_anagrams_sorted$difficulty <- ifelse(df_anagrams_sorted$quartile == 2, "difficult", df_anagrams_sorted$difficulty)
df_anagrams_sorted$difficulty <- ifelse(df_anagrams_sorted$quartile == 1, "very_difficult", df_anagrams_sorted$difficulty)
View(df_anagrams)
write.csv(df_anagrams, "extended_losses_exp_df.csv", row.names = FALSE)
write.csv(df_anagrams, "extended_losses_exp_df2.csv", row.names = FALSE)
write.csv(df_anagrams_sorted[, c("word_sp", "anagram", "solutions", "difficulty", "difficulty_aggregate")], "anagrams_losses_exp_to_labjs.csv", row.names = FALSE)
write.csv(df_anagrams_sorted[df_anagrams_sorted$difficulty == "easy", c("anagram", "solutions", "difficulty", "block")],
"easy_anagrams_losses_exp_to_labjs.csv", row.names = FALSE)
write.csv(df_anagrams_sorted[df_anagrams_sorted$difficulty == "difficult", c("anagram", "solutions", "difficulty", "block")],
"difficult_anagrams_losses_exp_to_labjs.csv", row.names = FALSE)
write.csv(df_anagrams_sorted[df_anagrams_sorted$difficulty == "very_difficult", c("anagram", "solutions", "difficulty", "block")],
"very_difficult_anagrams_losses_exp_to_labjs.csv", row.names = FALSE)
library(dplyr)
library(purrr)
library(tidyverse)
path = "./raw_data/anagrams_exp/"
# Read all files from path
df <-
list.files(path = path, pattern = "*.csv") %>%
map_df(~read.csv(paste0(path,.), sep = ","))
# Replace empty char by nan
df <- df %>% mutate_if(is.character, list(~na_if(.,"")))
# Fill columns down
df <- df %>% fill(ID, attempts, condition)
# Fill columns up
df <- df %>% fill(anagram_skipped, anagram_solved,
text_response,
feedback, age, education,
gender, occupation, feedback, q1, q2,
belief_others_anagrams, ID,
.direction = "up")
df$anagram_skipped <- ifelse(df$response == "next_block", 1, df$anagram_skipped)
df$participant_id <- as.integer(as.factor(df$ID))
for (participant in unique(df$participant_id)) {
repeated <- df[(df$participant_id == participant) & !is.na(df$repeat_instructions), "repeat_instructions"]
n_correct_attention <- df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention1"] +
df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention2"] +
df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention3"] +
df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention4"]
if (length(repeated) == 0) {
repeated <- "false"
}
if (length(n_correct_attention) == 0){
n_correct_attention <- "false"
}
df[(df$participant_id == participant), "repeat_instructions"] <- repeated
df[(df$participant_id == participant), "n_correct_attention"] <- n_correct_attention
if (n_correct_attention != "false"){
df[(df$participant_id == participant), "attention_finish"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_finish"]
df[(df$participant_id == participant), "attention_money"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_money"]
df[(df$participant_id == participant), "attention_blocks"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_blocks"]
df[(df$participant_id == participant), "attention_payment_position"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_payment_position"]
} else{
df[(df$participant_id == participant), "attention_finish"] <- NA
df[(df$participant_id == participant), "attention_money"] <- NA
df[(df$participant_id == participant), "attention_payment_position"] <- NA
df[(df$participant_id == participant), "attention_blocks"] <- NA
}
}
df <- df[df$sender %in% c('Anagram'), ]
columns <- c("participant_id", "timestamp", "ID", "condition",
"anagram", "anagram_skipped", "anagram_solved",
"anagrams_seen", "attempts", "duration",
"solutions", "text_response", "block", "block_order", "difficulty",
"feedback", "age", "education", "gender", "occupation",
"q1", "q2", "belief_others_anagrams", "repeat_instructions", "n_correct_attention",
"attention_finish", "attention_money", "attention_blocks", "attention_payment_position"
)
df <- df[, columns] %>% rename(q_gains = q1,
q_losses = q2,
anagrams_seen_block = anagrams_seen)
# reformat timestamp
df$timestamp <- strptime(str_replace(df$timestamp, "T", " "), format="%Y-%m-%d %H:%M:%S")
for (participant in unique(df$ID)) {
max_time <- max(df[(df$ID == participant) & (df$block == "main"), "timestamp"])
min_time <- min(df[(df$ID == participant) & (df$block == "main"), "timestamp"])
df[df$ID == participant, "duration_exp_mins"] <- as.numeric(difftime(max_time, min_time, units="mins"))
}
# Store session date
df$session_date <- format(df$timestamp, "%d-%m-%Y")
unique(df$feedback)
length(unique(df$ID))
unique(df$ID)
library(dplyr)
library(purrr)
library(tidyverse)
path = "./raw_data/anagrams_exp/"
# Read all files from path
files <- list.files(path = path, pattern = "*.csv")
length(files)
df <- NULL
for (file in files) {
df_file <- read.csv(paste0(path, file))
df_file$file <- file
df <- rbind(df, df_file)
}
# Read all files from path
files <- list.files(path = path, pattern = "*.csv")
length(files)
df <- NULL
for (file in files) {
df_file <- read.csv(paste0(path, file))
print(colnames(df_file))
df_file$file <- file
df <- rbind(df, df_file)
}
path = "./raw_data/anagrams_exp/"
# Read all files from path
files <- list.files(path = path, pattern = "*.csv")
length(files)
columns <- c("sender", "timestamp", "ID", "age", "anagram", "anagram_skipped",
"anagram_solved", "anagrams_seen", "attempts", "belief_others_anagrams",
"block","block_order", "condition", "difficulty", "duration",
"education", "feedback", "gender", "occupation", "q1", "q2", "response",
"text_response", "word")
df <- NULL
for (file in files) {
df_file <- read.csv(paste0(path, file))
columns_file <- colnames(df_file)
print(columns_file[!(columns_file %in% columns)])
df_file <- df_file[, columns]
df_file$file <- file
df <- rbind(df, df_file)
}
# Read all files from path
files <- list.files(path = path, pattern = "*.csv")
length(files)
columns <- c("sender", "timestamp", "ID", "age", "anagram", "anagram_skipped",
"anagram_solved", "anagrams_seen", "attempts", "belief_others_anagrams",
"block","block_order", "condition", "difficulty", "duration",
"education", "feedback", "gender", "occupation", "q1", "q2", "response",
"text_response", "word", "attention1", "attention2", "attention3", "attention4",
"attention_finish", "attention_money", "attention_blocks", "attention_payment_position")
df <- NULL
for (file in files) {
df_file <- read.csv(paste0(path, file))
columns_file <- colnames(df_file)
print(columns_file[!(columns_file %in% columns)])
df_file <- df_file[, columns]
df_file$file <- file
df <- bind_rows(df, df_file)
}
df <- NULL
for (file in files) {
df_file <- read.csv(paste0(path, file))
columns_file <- colnames(df_file)
df_file$file <- file
df <- bind_rows(df, df_file)
}
# Replace empty char by nan
df <- df %>% mutate_if(is.character, list(~na_if(.,"")))
# Fill columns down
df <- df %>% fill(ID, attempts, condition)
# Fill columns up
df <- df %>% fill(anagram_skipped, anagram_solved,
text_response,
feedback, age, education,
gender, occupation, feedback, q1, q2,
belief_others_anagrams, ID,
.direction = "up")
df$anagram_skipped <- ifelse(df$response == "next_block", 1, df$anagram_skipped)
df$participant_id <- as.integer(as.factor(df$ID))
for (participant in unique(df$participant_id)) {
repeated <- df[(df$participant_id == participant) & !is.na(df$repeat_instructions), "repeat_instructions"]
n_correct_attention <- df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention1"] +
df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention2"] +
df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention3"] +
df[(df$participant_id == participant) & (df$sender == "blankscreen"), "attention4"]
if (length(repeated) == 0) {
repeated <- "false"
}
if (length(n_correct_attention) == 0){
n_correct_attention <- "false"
}
df[(df$participant_id == participant), "repeat_instructions"] <- repeated
df[(df$participant_id == participant), "n_correct_attention"] <- n_correct_attention
if (n_correct_attention != "false"){
df[(df$participant_id == participant), "attention_finish"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_finish"]
df[(df$participant_id == participant), "attention_money"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_money"]
df[(df$participant_id == participant), "attention_blocks"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_blocks"]
df[(df$participant_id == participant), "attention_payment_position"] <- df[(df$participant_id == participant) & (df$sender == "attention_check"), "attention_payment_position"]
} else{
df[(df$participant_id == participant), "attention_finish"] <- NA
df[(df$participant_id == participant), "attention_money"] <- NA
df[(df$participant_id == participant), "attention_payment_position"] <- NA
df[(df$participant_id == participant), "attention_blocks"] <- NA
}
}
df <- df[df$sender %in% c('Anagram'), ]
columns <- c("participant_id", "timestamp", "ID", "condition",
"anagram", "anagram_skipped", "anagram_solved",
"anagrams_seen", "attempts", "duration",
"solutions", "text_response", "block", "block_order", "difficulty",
"feedback", "age", "education", "gender", "occupation",
"q1", "q2", "belief_others_anagrams", "repeat_instructions", "n_correct_attention",
"attention_finish", "attention_money", "attention_blocks", "attention_payment_position",
"file"
)
df <- df[, columns] %>% rename(q_gains = q1,
q_losses = q2,
anagrams_seen_block = anagrams_seen)
# reformat timestamp
df$timestamp <- strptime(str_replace(df$timestamp, "T", " "), format="%Y-%m-%d %H:%M:%S")
for (participant in unique(df$ID)) {
max_time <- max(df[(df$ID == participant) & (df$block == "main"), "timestamp"])
min_time <- min(df[(df$ID == participant) & (df$block == "main"), "timestamp"])
df[df$ID == participant, "duration_exp_mins"] <- as.numeric(difftime(max_time, min_time, units="mins"))
}
# Store session date
df$session_date <- format(df$timestamp, "%d-%m-%Y")
unique(df$feedback)
length(unique(df$ID))
unique(df$ID)
df$attempts <- df$attempts + 1
df$duration2 <- 0
df$median_time_base <- 0
# sum time in attemps
for (participant in unique(df$ID)) {
df[(df$ID == participant), "median_time_base"] <- median(df[(df$ID == participant) & (df$block == "base"), "duration"])
for (anagram in unique(df[df$ID == participant, "anagram"])) {
df[(df$ID == participant) & (df$anagram == anagram), "duration2"] <- df[(df$ID == participant) & (df$anagram == anagram), "duration"]
if (nrow(df[(df$ID == participant) & (df$anagram == anagram), ]) > 1)  {
df[(df$ID == participant) & (df$anagram == anagram), "duration2"] <- sum(df[(df$ID == participant) & (df$anagram == anagram), "duration"])
}
}
}
unique(df$feedback)
if(length(unique(df$ID)) != length(unique(df$file))){
print("It seems that there is a ID repeated")
}
length(unique(df$ID))
unique(df$ID)
df <- df[!((df$anagram_skipped == 0) & (df$anagram_solved == 0)), ]
df$text_response <- ifelse(df$anagram_skipped == 1, NA, df$text_response)
for (participant in unique(df$participant_id)) {
df[(df$participant_id == participant) & (df$block == "main"), "anagrams_seen_total"] <- 1:nrow(df[(df$participant_id == participant) & (df$block == "main"),])
}
df$difficulty_num <- 1
df$difficulty_num <- ifelse(df$difficulty == "difficult", 2, df$difficulty_num)
df$difficulty_num <- ifelse(df$difficulty == "very_difficult", 3, df$difficulty_num)
df$duration <- df$duration2
df$duration2 <- NULL
aggregated <- df[(df$block == "main"), ] %>%
group_by(ID, difficulty_num) %>%
summarise(condition=first(condition),
difficulty = first(difficulty),
total_anagrams = n(),
total_anagrams_solved = sum(anagram_solved),
prop_anagrams_solved = mean(anagram_solved),
mean_attempts = mean(attempts),
mean_rt = mean(duration),
attention_checks = first(n_correct_attention),
attention_money = first(attention_money),
attention_blocks = first(attention_blocks),
attention_finish = first(attention_finish),
attention_payment_position = first(attention_payment_position),
duration_exp_mins = first(duration_exp_mins),
belief_others = first(belief_others_anagrams),
session_date = first(session_date))
View(aggregated)
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 3/mixed_domains")
for (model in 1:n_models) {
system(paste0("fast-dm model",
model, ".ctl"))
}
n_models <- 9
for (model in 1:n_models) {
system(paste0("fast-dm model",
model, ".ctl"))
}
