summarize(prop_correct = round(mean(maximized_option), 2)
))
boxplot(aggregated2$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
aggregated2 <- as.data.frame(df2 %>%
group_by(subject_id) %>%
summarize(prop_correct = round(mean(maximized_option), 2)
))
boxplot(aggregated2$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated2$prop_correct)$out
out_ind <- which(aggregated2$prop_correct %in% c(out))
participants_outlier <- aggregated2[out_ind, "participant_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
out <- boxplot.stats(aggregated2$prop_correct)$out
out_ind <- which(aggregated2$prop_correct %in% c(out))
participants_outlier <- aggregated2[out_ind, "subject_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
boxplot(aggregated2$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated2$prop_correct)$out
out_ind <- which(aggregated2$prop_correct %in% c(out))
participants_outlier <- aggregated2[out_ind, "subject_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
df2 <- df2[!(df2$participant_id %in% participants_outlier), ]
# Study 3
df3 <- read_and_clean(file = "Study3cleaned_df.csv",
remove_basedOnRT= TRUE,
var_block = "block_order",
transform_log=FALSE)
##### READ AND CLEAN DATA
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
read_and_clean <- function(file = "Study1cleaned_df.csv",
remove_basedOnRT = TRUE,
remove_outliers_rt = FALSE,
column_rt = "duration",
column_participants = "subject_id",
remove_participants = c(),
var_block = "block",
transform_log=FALSE) {
# Read
df <- read.csv(file)
# Remove practice block
df <- df[df[var_block] != 0,]
if (remove_outliers_rt){
df <- remove_outliers(df, column_outiers = column_rt)
}
if (remove_basedOnRT){
# Save sizes and remove trials
original_size <<- nrow(df)
removed_trials <<-
nrow(df) - nrow(df[(df["duration"] > 250) &
(df["duration"] < 3500), ])
df <- df[(df["duration"] > 250) & (df["duration"] < 3500), ]
print(
paste0(
removed_trials,
" trials have been removed based on RT. This is a %",
removed_trials / original_size * 100
)
)
} else{
print("No trials have been removed based on RT.")
}
if (length(remove_participants) != 0){
to_keep <- !pull(df, column_participants) %in% remove_participants
df <- df[to_keep, ]
print(paste0("Removed ", length(remove_participants), " participants: ", paste0(remove_participants, collapse=",")))
}
df$duration_secs <- round((df$duration/1000), 5)
rownames(df) <- NULL
if (transform_log){
df["RT_transformed"] <- log10(df["duration"])
}
return(df)
}
# Repeat for Study 2
df2 <- read_and_clean(file = "Study2cleaned_df.csv",
remove_basedOnRT= TRUE,
remove_outliers = FALSE,
column_participants = "subject_id",
remove_participants = c(),
var_block = "block_order",
transform_log=FALSE)
aggregated2 <- as.data.frame(df2 %>%
group_by(subject_id) %>%
summarize(prop_correct = round(mean(maximized_option), 2)
))
boxplot(aggregated2$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated2$prop_correct)$out
out_ind <- which(aggregated2$prop_correct %in% c(out))
participants_outlier <- aggregated2[out_ind, "subject_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
df2 <- df2[!(df2$participant_id %in% participants_outlier), ]
# Study 3
df3 <- read_and_clean(file = "Study3cleaned_df.csv",
remove_basedOnRT= TRUE,
var_block = "block_order",
transform_log=FALSE)
df3$pure_domain <- ifelse(substr(df3$domain, 0, 4) == "pure", 1, 0)
aggregated3 <- as.data.frame(df3 %>%
filter(pure_domain == 1)  %>%
group_by(participant_id) %>%
summarize(prop_correct = round(mean(correct), 2)
))
boxplot(aggregated3$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated3$prop_correct)$out
out_ind <- which(aggregated3$prop_correct %in% c(out))
participants_outlier <- aggregated3[out_ind, "participant_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
df3 <- df3[!(df3$participant_id %in% participants_outlier), ]
create_participants_DDM <- function(df,
participant_column="subject_id",
columns_keep){
for (participant in unique(df[, participant_column])) {
write.table(
df[df[, participant_column] == participant, columns_keep],
file = paste0(participant, ".txt"),
sep = "\t",
row.names = FALSE,
col.names = FALSE
)
}
}
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 2/")
create_participants_DDM(df2, c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
create_participants_DDM(df2,
participant_column="subject_id",
c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
create_participants_DDM <- function(df,
participant_column="subject_id",
columns_keep){
for (participant in unique(df[, participant_column])) {
print(participant)
write.table(
df[df[, participant_column] == participant, columns_keep],
file = paste0(participant, ".txt"),
sep = "\t",
row.names = FALSE,
col.names = FALSE
)
}
}
create_participants_DDM(df2,
participant_column="subject_id",
c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
View(df2)
# Repeat for Study 2
df2 <- read_and_clean(file = "Study2cleaned_df.csv",
remove_basedOnRT= TRUE,
remove_outliers = FALSE,
column_participants = "subject_id",
remove_participants = c(),
var_block = "block_order",
transform_log=FALSE)
setwd("D:/Carlos/Documentos/Google Drive/Universidad/doctorado/experiments/loss perception/loss-perception-exp/analysis")
# Repeat for Study 2
df2 <- read_and_clean(file = "Study2cleaned_df.csv",
remove_basedOnRT= TRUE,
remove_outliers = FALSE,
column_participants = "subject_id",
remove_participants = c(),
var_block = "block_order",
transform_log=FALSE)
create_participants_DDM <- function(df,
participant_column="subject_id",
columns_keep){
for (participant in unique(df[, participant_column])) {
print(participant)
write.table(
df[df[, participant_column] == participant, columns_keep],
file = paste0(participant, ".txt"),
sep = "\t",
row.names = FALSE,
col.names = FALSE
)
}
}
setwd("DDM/Study 2/")
create_participants_DDM(df2,
participant_column="subject_id",
c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
create_participants_DDM(df2,
participant_column="subject_id",
c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
# Repeat for Study 2
df2 <- read_and_clean(file = "Study2cleaned_df.csv",
remove_basedOnRT= TRUE,
remove_outliers = FALSE,
column_participants = "subject_id",
remove_participants = c(),
var_block = "block_order",
transform_log=FALSE)
##### READ AND CLEAN DATA
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
read_and_clean <- function(file = "Study1cleaned_df.csv",
remove_basedOnRT = TRUE,
remove_outliers_rt = FALSE,
column_rt = "duration",
column_participants = "subject_id",
remove_participants = c(),
var_block = "block",
transform_log=FALSE) {
# Read
df <- read.csv(file)
# Remove practice block
df <- df[df[var_block] != 0,]
if (remove_outliers_rt){
df <- remove_outliers(df, column_outiers = column_rt)
}
if (remove_basedOnRT){
# Save sizes and remove trials
original_size <<- nrow(df)
removed_trials <<-
nrow(df) - nrow(df[(df["duration"] > 250) &
(df["duration"] < 3500), ])
df <- df[(df["duration"] > 250) & (df["duration"] < 3500), ]
print(
paste0(
removed_trials,
" trials have been removed based on RT. This is a %",
removed_trials / original_size * 100
)
)
} else{
print("No trials have been removed based on RT.")
}
if (length(remove_participants) != 0){
to_keep <- !pull(df, column_participants) %in% remove_participants
df <- df[to_keep, ]
print(paste0("Removed ", length(remove_participants), " participants: ", paste0(remove_participants, collapse=",")))
}
df$duration_secs <- round((df$duration/1000), 5)
rownames(df) <- NULL
if (transform_log){
df["RT_transformed"] <- log10(df["duration"])
}
return(df)
}
remove_outliers <- function(df, column_outiers="duration"){
# Check and remove outliers (1.5 IQR)
column <- as.numeric(unlist(df1[column_name]))
if (length(boxplot.stats(column)$out) != 0) {
out <- boxplot.stats(column)$out
out_ind <- which(column %in% c(out))
df <- df[!rownames(df) %in% out_ind, ]
removed_trials <- removed_trials + length(out)
rownames(df) <- NULL
print(paste0(length(out),
" outliers have been removed from dataset. Thus ",
removed_trials, " trials have been eliminated. This is a %",
removed_trials/original_size*100))
} else{
print("There are no outliers in dataset.")
}
return(df)
}
# Repeat for Study 2
df2 <- read_and_clean(file = "Study2cleaned_df.csv",
remove_basedOnRT= TRUE,
remove_outliers = FALSE,
column_participants = "subject_id",
remove_participants = c(),
var_block = "block_order",
transform_log=FALSE)
aggregated2 <- as.data.frame(df2 %>%
group_by(subject_id) %>%
summarize(prop_correct = round(mean(maximized_option), 2)
))
View(aggregated2)
boxplot(aggregated2$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated2$prop_correct)$out
out_ind <- which(aggregated2$prop_correct %in% c(out))
participants_outlier <- aggregated2[out_ind, "subject_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
df2 <- df2[!(df2$participant_id %in% participants_outlier), ]
##### READ AND CLEAN DATA
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
read_and_clean <- function(file = "Study1cleaned_df.csv",
remove_basedOnRT = TRUE,
remove_outliers_rt = FALSE,
column_rt = "duration",
column_participants = "subject_id",
remove_participants = c(),
var_block = "block",
transform_log=FALSE) {
# Read
df <- read.csv(file)
# Remove practice block
df <- df[df[var_block] != 0,]
if (remove_outliers_rt){
df <- remove_outliers(df, column_outiers = column_rt)
}
if (remove_basedOnRT){
# Save sizes and remove trials
original_size <<- nrow(df)
removed_trials <<-
nrow(df) - nrow(df[(df["duration"] > 250) &
(df["duration"] < 3500), ])
df <- df[(df["duration"] > 250) & (df["duration"] < 3500), ]
print(
paste0(
removed_trials,
" trials have been removed based on RT. This is a %",
removed_trials / original_size * 100
)
)
} else{
print("No trials have been removed based on RT.")
}
if (length(remove_participants) != 0){
to_keep <- !pull(df, column_participants) %in% remove_participants
df <- df[to_keep, ]
print(paste0("Removed ", length(remove_participants), " participants: ", paste0(remove_participants, collapse=",")))
}
df$duration_secs <- round((df$duration/1000), 5)
rownames(df) <- NULL
if (transform_log){
df["RT_transformed"] <- log10(df["duration"])
}
return(df)
}
remove_outliers <- function(df, column_outiers="duration"){
# Check and remove outliers (1.5 IQR)
column <- as.numeric(unlist(df1[column_name]))
if (length(boxplot.stats(column)$out) != 0) {
out <- boxplot.stats(column)$out
out_ind <- which(column %in% c(out))
df <- df[!rownames(df) %in% out_ind, ]
removed_trials <- removed_trials + length(out)
rownames(df) <- NULL
print(paste0(length(out),
" outliers have been removed from dataset. Thus ",
removed_trials, " trials have been eliminated. This is a %",
removed_trials/original_size*100))
} else{
print("There are no outliers in dataset.")
}
return(df)
}
# Repeat for Study 2
df2 <- read_and_clean(file = "Study2cleaned_df.csv",
remove_basedOnRT= TRUE,
remove_outliers = FALSE,
column_participants = "subject_id",
remove_participants = c(),
var_block = "block_order",
transform_log=FALSE)
aggregated2 <- as.data.frame(df2 %>%
group_by(subject_id) %>%
summarize(prop_correct = round(mean(maximized_option), 2)
))
boxplot(aggregated2$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated2$prop_correct)$out
out_ind <- which(aggregated2$prop_correct %in% c(out))
participants_outlier <- aggregated2[out_ind, "subject_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
df2 <- df2[!(df2$subject_id %in% participants_outlier), ]
# Study 3
df3 <- read_and_clean(file = "Study3cleaned_df.csv",
remove_basedOnRT= TRUE,
var_block = "block_order",
transform_log=FALSE)
df3$pure_domain <- ifelse(substr(df3$domain, 0, 4) == "pure", 1, 0)
aggregated3 <- as.data.frame(df3 %>%
filter(pure_domain == 1)  %>%
group_by(participant_id) %>%
summarize(prop_correct = round(mean(correct), 2)
))
boxplot(aggregated3$prop_correct,
ylab="Proportion",
main = "Proportion of correct in pure domains"
)
out <- boxplot.stats(aggregated3$prop_correct)$out
out_ind <- which(aggregated3$prop_correct %in% c(out))
participants_outlier <- aggregated3[out_ind, "participant_id"]
mtext(paste("Participant outliers: ", paste(participants_outlier, collapse = ", ")))
df3 <- df3[!(df3$participant_id %in% participants_outlier), ]
create_participants_DDM <- function(df,
participant_column="subject_id",
columns_keep){
for (participant in unique(df[, participant_column])) {
print(participant)
write.table(
df[df[, participant_column] == participant, columns_keep],
file = paste0(participant, ".txt"),
sep = "\t",
row.names = FALSE,
col.names = FALSE
)
}
}
getwd()
setwd("DDM/Study 1/")
create_participants_DDM(df1, participant_column="subject_id",
c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 2/")
create_participants_DDM(df2,
participant_column="subject_id",
c("maximized_option",
"duration_secs",
"domain",
"diff_net_value"))
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 3/pure_domains")
create_participants_DDM(df3[df3$domain %in% c("pure_mixed", "pure_gain", "pure_loss"),],
participant_column = "participant_id",
c("correct",
"duration_secs",
"domain"))
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 3/mixed_domains")
create_participants_DDM(df3[df3$domain %in% c("mixed_loss", "mixed_gain"),],
participant_column = "participant_id",
c("correct",
"duration_secs",
"domain"))
setwd("DDM")
create_models <- function(study="Study 1",
format="RESPONSE TIME condition difficulty"){
df <- read.csv(paste0("models_", gsub(" ", "", study), ".csv"), row.names=NULL, sep=";")
df <- subset(df, select = -c(model, p))
for (row in 1:nrow(df)){
sink(paste0("./", study, "/model", row, ".ctl"))
cat(paste0("# Model ", row), "\n")
cat(paste0("method ml", "\n", "precision 3", "\n"))
for (column in rev(colnames(df))){
if (column %in% c("v", "t0", "a")){
if (df[row, column] == "C"){
cat(paste0("depends ", column, " condition"), "\n")
}
if (df[row, column] == "C, D"){
cat(paste0("depends ", column, " condition difficulty"), "\n")
}
} else{
if (df[row, column] != "-"){
cat(paste0("set ", column, " ",  df[row, column]), "\n")
}
}
}
cat(paste0("format ", format, "\n",
"load *.txt", "\n",
"log model", row, ".log"))
sink()
}
}
setwd("D:/Carlos/Documentos/Google Drive/Universidad/doctorado/experiments/loss perception/loss-perception-exp/analysis")
setwd("DDM")
# Create models for Study 1
create_models(study="Study 1")
# Create models for Study 2
create_models(study="Study 2")
n_models <- 9
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 2")
for (model in 1:n_models) {
system(paste0("fast-dm model",
model, ".ctl"))
}
# Return to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("DDM/Study 3/pure_domains")
for (model in 1:n_models) {
system(paste0("fast-dm model",
model, ".ctl"))
}
